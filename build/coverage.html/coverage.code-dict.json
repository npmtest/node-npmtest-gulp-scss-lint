{"/home/travis/build/npmtest/node-npmtest-gulp-scss-lint/test.js":"/* istanbul instrument in package npmtest_gulp_scss_lint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-scss-lint/lib.npmtest_gulp_scss_lint.js":"/* istanbul instrument in package npmtest_gulp_scss_lint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_scss_lint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_scss_lint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-scss-lint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-scss-lint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_scss_lint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_scss_lint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_scss_lint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_scss_lint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_scss_lint.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_scss_lint.__dirname + '/lib.npmtest_gulp_scss_lint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-scss-lint/node_modules/gulp-scss-lint/src/index.js":"'use strict';\n\nvar es = require('event-stream'),\nreadline = require('readline'),\ngutil = require('gulp-util'),\ncolors = gutil.colors,\nreporters = require('./reporters'),\nscssLint = require('./scss-lint'),\nReadable = require('stream').Readable;\n\nvar PLUGIN_NAME = 'gulp-scss-lint';\n\nvar gulpScssLint = function (options) {\n  options = options || {};\n\n  options.format = 'JSON';\n\n  if (options.reporterOutputFormat === 'Checkstyle') {\n    options.format = 'Checkstyle';\n    options.require = 'scss_lint_reporter_checkstyle';\n  }\n\n  if (options.exclude) {\n    throw new gutil.PluginError(PLUGIN_NAME, \"You must use gulp src to exclude\");\n  }\n\n  var lint = function(stream, files) {\n    scssLint(stream, files, options)\n      .then(function() {\n        if (!options.endless) {\n          stream.emit('end');\n        }\n      }, function(e) {\n        var err = new gutil.PluginError(PLUGIN_NAME, e);\n\n        stream.emit('error', err);\n        stream.emit('end');\n      })\n      .done(function(e) {});\n  };\n\n  var getStream = function() {\n    var files = [];\n\n    var writeStream = function(currentFile){\n      if (options.endless) {\n        lint(stream, [currentFile]);\n      } else {\n        files.push(currentFile);\n      }\n    };\n\n    var endStream = function() {\n      if (options.endless) {\n        return;\n      }\n\n      if (!files.length) {\n        stream.emit('end');\n        return;\n      }\n\n      lint(stream, files);\n    };\n\n    var stream = es.through(writeStream, endStream);\n\n    return stream;\n  };\n\n  var getNewStream = function() {\n    var stream = new Readable({objectMode: true});\n    stream._read = function () {};\n\n    lint(stream, [options.src]);\n\n    return stream;\n  };\n\n  if (options.src) {\n    return getNewStream();\n  }\n\n  return getStream();\n};\n\ngulpScssLint.failReporter = reporters.failReporter;\ngulpScssLint.defaultReporter = reporters.defaultReporter;\n\nmodule.exports = gulpScssLint;\n","/home/travis/build/npmtest/node-npmtest-gulp-scss-lint/node_modules/gulp-scss-lint/src/reporters.js":"'use strict';\n\nvar es = require('event-stream'),\ngutil = require('gulp-util'),\ncolors = gutil.colors;\n\nexports.failReporter = function (severity) {\n  return es.map(function(file, cb) {\n    var error;\n\n    if (!file.scsslint.success) {\n      if (!severity || severity === 'E' && file.scsslint.errors > 0) {\n        error = new gutil.PluginError('gulp-scss-lint', {\n          message: 'ScssLint failed for: ' + file.relative,\n          showStack: false\n        });\n      }\n    }\n\n    cb(error, file);\n  });\n};\n\nexports.defaultReporter = function (file) {\n  if (!file.scsslint.success) {\n    gutil.log(colors.cyan(file.scsslint.issues.length) + ' issues found in ' + colors.magenta(file.path));\n\n    file.scsslint.issues.forEach(function (issue) {\n      var severity = issue.severity === 'warning' ? colors.yellow(' [W] ') : colors.red(' [E] ');\n      var linter = issue.linter ? (issue.linter + ': ') : '';\n      var logMsg =\n        colors.cyan(file.relative) + ':' + colors.magenta(issue.line) + severity + colors.green(linter) + issue.reason;\n\n      gutil.log(logMsg);\n    });\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-scss-lint/node_modules/gulp-scss-lint/src/scss-lint.js":"'use strict';\n\nvar Promise = require('bluebird');\nvar fs = require('fs');\nvar path = require('path');\nvar gutil = require('gulp-util');\nvar shellescape = require('shell-escape');\nvar vinylFs = require('vinyl-fs');\nvar es = require('event-stream');\nvar slash = require('slash');\n\nvar lintCommand = require('./command');\nvar reporters = require('./reporters');\n\nfunction getRelativePath(filePath) {\n  return slash(path.relative(process.cwd(), filePath));\n}\n\nfunction getFilePaths(files) {\n  return files.map(function (file) {\n    return shellescape([getRelativePath(file.path)]);\n  });\n}\n\nfunction defaultLintResult() {\n  return {\n    success: true,\n    errors: 0,\n    warnings: 0,\n    issues: []\n  };\n}\n\nfunction reportLint(stream, files, options, lintReport, xmlReport) {\n  var report = {};\n\n  // normalize scss-lint urls\n  Object.keys(lintReport).forEach(function(key) {\n    var newKey = slash(key);\n    report[newKey] = lintReport[key];\n  });\n\n  if (options.reporterOutput || options.endlessReporter) {\n    var output = null;\n    var reporterOutput = null;\n\n    if (xmlReport) {\n      output = xmlReport;\n    } else {\n      output = JSON.stringify(report);\n    }\n\n    if (options.reporterOutput) {\n      reporterOutput = options.reporterOutput || '';\n    } else if(options.endlessReporter) {\n      reporterOutput = '';\n\n      if (typeof options.endlessReporter === 'string' || options.endlessReporter instanceof String) {\n        reporterOutput = options.endlessReporter;\n      }\n\n      reporterOutput = path.join(reporterOutput, 'report-' + path.basename(files[0].path));\n\n      if (xmlReport) reporterOutput += '.xml';\n      else reporterOutput += '.json';\n    }\n\n    fs.writeFileSync(reporterOutput, output);\n  }\n\n  var fileReport;\n  var lintResult = {};\n\n  for (var i = 0; i < files.length; i++) {\n    lintResult = defaultLintResult();\n\n    //relative or absolute path\n    fileReport = report[slash(files[i].path)];\n\n    if (!fileReport) {\n      fileReport = report[getRelativePath(files[i].path)];\n    }\n\n    if (fileReport) {\n      lintResult.success = false;\n\n      fileReport.forEach(function (issue) {\n        var severity = issue.severity === 'warning' ? 'W' : 'E';\n\n        if (severity === 'W') {\n          lintResult.warnings++;\n        } else {\n          lintResult.errors++;\n        }\n\n        lintResult.issues.push(issue);\n      });\n    }\n\n    files[i].scsslint = lintResult;\n\n    if (options.customReport) {\n      options.customReport(files[i], stream);\n    } else {\n      reporters.defaultReporter(files[i]);\n    }\n\n    if (!options.filePipeOutput) {\n      if (options.src) {\n        stream.push(files[i]);\n      } else {\n        stream.emit('data', files[i]);\n      }\n    }\n  }\n\n  //TODO: endless support\n  if (options.filePipeOutput) {\n    var contentFile = \"\";\n\n    if (xmlReport) {\n      contentFile = xmlReport;\n    } else {\n      contentFile = JSON.stringify(report);\n    }\n\n    var pipeFile = new gutil.File({\n      cwd: files[0].cwd,\n      base: files[0].base,\n      path: path.join(files[0].base, options.filePipeOutput),\n      contents: new Buffer(contentFile)\n    });\n\n    pipeFile.scsslint = lintResult;\n\n    if (options.src) {\n      stream.push(files[i]);\n    } else {\n      stream.emit('data', pipeFile);\n    }\n  }\n}\n\nfunction getVinylFiles(paths) {\n  return new Promise(function(resolve, reject){\n    var files = [];\n\n    var stream = es.through(function(currentFile) {\n      files.push(currentFile);\n    }, function() {\n      resolve(files);\n    });\n\n    vinylFs.src(paths).pipe(stream);\n  });\n}\n\nmodule.exports = function(stream, files, options) {\n  return new Promise(function(resolve, reject){\n    var filesPaths = [];\n\n    if (options.src) {\n      filesPaths = options.src;\n    } else {\n      filesPaths = getFilePaths(files);\n    }\n\n    lintCommand(filesPaths, options)\n      .spread(function(report, xmlReport) {\n        if (options.src) {\n          var paths = Object.keys(report);\n\n          getVinylFiles(paths).then(function(vinylFiles) {\n            reportLint(stream, vinylFiles, options, report, xmlReport);\n            resolve();\n          });\n        } else {\n          try {\n            reportLint(stream, files, options, report, xmlReport);\n          } catch(err) {\n            // if the user run scss-lint from node instead of gulp, stream.emit('data', null); becomes syncronous and this will handle the failReporter #58\n            reject(err);\n          }\n\n          resolve();\n        }\n      })\n      .catch(function (e) {\n        reject(e);\n      });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-scss-lint/node_modules/gulp-scss-lint/src/command.js":"'use strict';\n\nvar execSync = require('sync-exec');\nvar Promise = require('bluebird');\nvar checkstyle = require('./checkstyle');\nvar dargs = require('dargs');\nvar child_process = require('child_process');\n\nvar scssLintCodes = {\n  '64': 'Command line usage error',\n  '66': 'Input file did not exist or was not readable',\n  '69': 'You need to have the scss_lint_reporter_checkstyle gem installed',\n  '70': 'Internal software error',\n  '78': 'Configuration error',\n  '127': 'You need to have Ruby and scss-lint gem installed'\n};\n\nfunction generateCommand(filePaths, options) {\n  var commandParts = ['scss-lint'],\n      excludes = ['bundleExec',\n                  'filePipeOutput',\n                  'reporterOutput',\n                  'endlessReporter',\n                  'src',\n                  'shell',\n                  'reporterOutputFormat',\n                  'customReport',\n                  'maxBuffer',\n                  'endless',\n                  'verbose',\n                  'sync'];\n\n  if (options.bundleExec) {\n    commandParts.unshift('bundle', 'exec');\n    excludes.push('bundleExec');\n  }\n\n  var optionsArgs = dargs(options, {excludes: excludes});\n\n  return commandParts.concat(filePaths, optionsArgs).join(' ');\n}\n\nfunction execCommand(command, options) {\n  return new Promise(function(resolve, reject) {\n    var commandOptions = {\n      env: process.env,\n      cwd: process.cwd(),\n      maxBuffer: options.maxBuffer || 300 * 1024,\n      shell: options.shell\n    };\n\n    if (options.sync || options.endless) {\n      var commandResult = execSync(command);\n      var error = null;\n\n      if (commandResult.status) {\n        error = {code: commandResult.status};\n      }\n\n      resolve({error: error, report: commandResult.stdout});\n    } else {\n      child_process.exec(command, commandOptions, function(error, report) {\n        resolve({error: error, report: report});\n      });\n    }\n  });\n}\n\nfunction configFileReadError(report, options) {\n  return report.indexOf('No such file or directory - ' + options.config) !== -1;\n}\n\nfunction execLintCommand(command, options) {\n  return new Promise(function(resolve, reject) {\n    execCommand(command, options).then(function(result) {\n      var error = result.error;\n      var report = result.report;\n\n      if (error && error.code !== 1 && error.code !== 2 && error.code !== 65) {\n        if (scssLintCodes[error.code]) {\n          if (error.code === 66 && configFileReadError(report, options)) {\n            reject('Config file did not exist or was not readable');\n          } else {\n            reject(scssLintCodes[error.code]);\n          }\n        } else if (error.code) {\n          reject('Error code ' + error.code + '\\n' + error);\n        } else {\n          reject(error);\n        }\n      } else if (error && error.code === 1 && report.length === 0) {\n        reject('Error code ' + error.code + '\\n' + error);\n      } else  {\n        if (options.format === 'JSON'){\n          resolve([JSON.parse(report)]);\n        } else {\n          checkstyle.toJSON(report, resolve);\n        }\n      }\n    });\n  });\n}\n\nmodule.exports = function(filePaths, options) {\n  var command = generateCommand(filePaths, options);\n\n  if (options.verbose) {\n    console.log(command);\n  }\n\n  return execLintCommand(command, options);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-scss-lint/node_modules/gulp-scss-lint/src/checkstyle.js":"'use strict';\n\nvar pd = require('pretty-data').pd,\n    xml2js = require('xml2js').parseString;\n\nexports.toJSON = function (report, cb) {\n  var obj = {};\n  var xmlReport = pd.xml(report);\n  var error = [];\n\n  xml2js(xmlReport, function(err, report) {\n    report.checkstyle.file = report.checkstyle.file || [];\n\n    report.checkstyle.file.forEach(function(file) {\n        obj[file.$.name] = [];\n\n        file.error.forEach(function(error) {\n          error.$.linter = error.$.source;\n          error.$.reason = error.$.message;\n\n          obj[file.$.name].push(error.$);\n        });\n    });\n\n    cb([obj, xmlReport]);\n  });\n};\n"}